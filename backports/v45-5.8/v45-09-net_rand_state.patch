--- linux-5.8/drivers/char/lrng/lrng_es_irq.c.orig	2022-05-17 10:05:15.834989742 +0200
+++ linux-5.8/drivers/char/lrng/lrng_es_irq.c	2022-05-17 10:11:03.976922092 +0200
@@ -13,6 +13,7 @@
 #include <linux/gcd.h>
 #include <linux/module.h>
 #include <linux/random.h>
+#include <linux/ratelimit.h>
 
 #include "lrng_es_aux.h"
 #include "lrng_es_irq.h"
@@ -618,10 +619,13 @@ static void lrng_irq_array_add_slot(u32
 }
 
 static void
-lrng_time_process_common(u32 time, void(*add_time)(u32 data))
+lrng_time_process_common(u32 time, u32 random32_data, void(*add_time)(u32 data))
 {
 	enum lrng_health_res health_test;
 
+	/* Seed random32 PRNG with data not used by LRNG. */
+	this_cpu_add(net_rand_state.s1, random32_data);
+
 	if (lrng_raw_hires_entropy_store(time))
 		return;
 
@@ -637,19 +641,23 @@ lrng_time_process_common(u32 time, void(
 
 /*
  * Batching up of entropy in per-CPU array before injecting into entropy pool.
+ *
+ * The random32_data is solely to be used for the external random32 PRNG.
  */
-static void lrng_time_process(void)
+static void lrng_time_process(u32 random32_data)
 {
 	u32 now_time = random_get_entropy();
 
 	if (unlikely(!lrng_gcd_tested())) {
 		/* When GCD is unknown, we process the full time stamp */
-		lrng_time_process_common(now_time, _lrng_irq_array_add_u32);
+		lrng_time_process_common(now_time, random32_data, _lrng_irq_array_add_u32);
 		lrng_gcd_add_value(now_time);
 	} else {
+		now_time /= lrng_gcd_get();
 		/* GCD is known and applied */
-		lrng_time_process_common((now_time / lrng_gcd_get()) &
-					 LRNG_DATA_SLOTSIZE_MASK,
+		lrng_time_process_common((now_time) & LRNG_DATA_SLOTSIZE_MASK,
+					 (now_time & ~LRNG_DATA_SLOTSIZE_MASK) ^
+								random32_data,
 					 lrng_irq_array_add_slot);
 	}
 
@@ -659,13 +667,17 @@ static void lrng_time_process(void)
 /* Hot code path - Callback for interrupt handler */
 void add_interrupt_randomness(int irq, int irq_flg)
 {
+	u32 tmp;
+
 	if (lrng_highres_timer()) {
-		lrng_time_process();
+		tmp = lrng_raw_irq_entropy_store(irq) ? 0 : irq;
+		tmp ^= irq_flg;
+		tmp ^= lrng_raw_retip_entropy_store(_RET_IP_) ? 0 : _RET_IP_;
+		lrng_time_process(tmp);
 	} else {
 		struct pt_regs *regs = get_irq_regs();
 		static atomic_t reg_idx = ATOMIC_INIT(0);
 		u64 ip;
-		u32 tmp;
 
 		if (regs) {
 			u32 *ptr = (u32 *)regs;
@@ -680,7 +692,7 @@ void add_interrupt_randomness(int irq, i
 			ip = _RET_IP_;
 		}
 
-		lrng_time_process();
+		lrng_time_process(lrng_raw_retip_entropy_store(ip) ? 0 : ip);
 
 		/*
 		 * The XOR operation combining the different values is not
@@ -688,11 +700,11 @@ void add_interrupt_randomness(int irq, i
 		 * processed values delivers the entropy (and not each
 		 * value separately of the other values).
 		 */
+		ip >>= 32;
 		tmp = lrng_raw_jiffies_entropy_store(jiffies) ? 0 : jiffies;
 		tmp ^= lrng_raw_irq_entropy_store(irq) ? 0 : irq;
 		tmp ^= lrng_raw_retip_entropy_store(ip) ? 0 : ip;
 		tmp ^= irq_flg;
-		tmp ^= ip >> 32;
 		_lrng_irq_array_add_u32(tmp);
 	}
 }
